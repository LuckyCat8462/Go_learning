package main

// 服务发现
// 服务发现的背景
// 1.客户端访问服务器需要知道服务器的IP和端口号，通过IP和端口号建立连接。
// 2.当客户端需要访问多个服务时，需要分别获取每个服务的IP和端口号。
// 3.如果其中某个服务的IP地址发生变化，客户端将无法访问，需要更新IP信息。

// 服务发现的作用
// 1.服务发现允许客户端通过中间件（如Consul）来发现和访问后端服务。
// 2.服务在启动时自动注册到服务发现中，提供IP和端口信息。
// 3.客户端通过服务发现获取可用服务的IP和端口信息，建立连接并进行通信。

// 有服务发现后，client、server工作流程:
// 1.每个server启动时，都将自己的IP、port 和 服务名 注册给“服务发现“
// 2.当 client 向服务发现发起服务请求时，“服务发现"会自动找一个可用的 服务，将其 IP/port/服务名返回给 clien
// 3.client 再借助服务发现，访问 server。

// 在实际使用中，可以由n个同名服务组成集群，每个server可能有不同的IP与端口号，但是服务名相同，这样可以降低出错的概率

// 服务发现的种类
// 1.Consul：常用于Go Micro等微服务框架，基于DNS或HTTP接口提供服务发现。
// 2.mDNS：go Micro默认的服务发现，通过DNS协议实现服务发现。
// 3.Etcd：内嵌于k8s(Kubernetes)等分布式系统中，提供服务发现功能。
// 4.ZooKeeper：常用于Java等语言中，通过分布式协调服务提供服务发现。
//
// Consul的关键特性
// 1.服务发现：通过DNS或HTTP接口简化服务注册和服务发现。
// 2.健康检查：定期发送消息检测集群中服务的健康状态(心跳包)。
// 3.键值存储：虽然提供但通常不使用，更倾向于使用Redis等数据库。
// 4.多数据中心：轻松搭建集群，支持任意数量的区域。
